<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 14 (filtered)">
<title>COMP131 Study Guide</title>
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:SimSun;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:Times;
	panose-1:2 2 6 3 5 4 5 2 3 4;}
@font-face
	{font-family:"\@SimSun";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times","serif";}
p.MsoAcetate, li.MsoAcetate, div.MsoAcetate
	{mso-style-link:"Balloon Text Char";
	margin:0in;
	margin-bottom:.0001pt;
	font-size:8.0pt;
	font-family:"Tahoma","sans-serif";}
p.MsoNoSpacing, li.MsoNoSpacing, div.MsoNoSpacing
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoListParagraphCxSpFirst, li.MsoListParagraphCxSpFirst, div.MsoListParagraphCxSpFirst
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoListParagraphCxSpMiddle, li.MsoListParagraphCxSpMiddle, div.MsoListParagraphCxSpMiddle
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoListParagraphCxSpLast, li.MsoListParagraphCxSpLast, div.MsoListParagraphCxSpLast
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
span.BalloonTextChar
	{mso-style-name:"Balloon Text Char";
	mso-style-link:"Balloon Text";
	font-family:"Tahoma","sans-serif";}
.MsoChpDefault
	{font-family:"Calibri","sans-serif";}
.MsoPapDefault
	{margin-bottom:10.0pt;
	line-height:115%;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

<body lang=EN-US>

<div class=WordSection1>

<p class=MsoNoSpacing align=center style='text-align:center'><b><span
style='font-size:12.0pt'>COMP 131 study guide</span></b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 1: Introduction</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>[No study guide notes for this topic]</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 2: How Computers Work</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Computers use two different types of information: they
run <b>programs </b>(e.g. wordprocessing programs, such as Microsoft Word), and
the programs operate on <b>data</b> (e.g. a Microsoft Word document being
edited by a student).</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The main idea of the <b>stored program architecture</b>
is that <span style='color:black'>both the program and the data on which it is
to operate are stored in the computer’s memory (previously, only the data was
in memory).</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The stored program architecture is made up of three main
components:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><b>CPU</b>: Executes the instructions that
make up the program.</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><b>Memory</b>: stores the running program
and the data on which it operates.</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><b>Input/Output</b> (I/O) Devices: Allow
user interaction with the machine (e.g. keyboard, screen, disk, printer).</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The CPU is also made up of 3 main components:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><b>Arithmetic Logic Unit (ALU)</b>: performs
the mathematical and logical operations indicated by the program <b>instructions</b></p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><b>Control Unit</b>: controls the flow of
data in the CPU</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><b>Registers</b>: store <span
style='color:black'>the values that can be used or produced by the ALU</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Data flows between different parts of the computer on <b>buses</b>. 
</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>A typical operation in the CPU consists of taking some
data from one or more registers, performing a mathematical transformation on
the data in the ALU, and storing the result in a register.  This whole process
is called a <b>CPU cycle</b>.  The &quot;speed&quot; of a CPU is the number of
CPU cycles it can execute per second.  This speed, or &quot;frequency&quot; is
measured in <b>hertz </b>(Hz); 1 Hz = 1 cycle per second.  For example, a 1.4
GHz CPU executes 1.4 billion CPU cycles every second.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 3: Binary Numbers and Machine Language</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>At the lowest level, you can think of the storage in
modern computers as being performed by tiny switches which have only two
settings: &quot;on&quot; and &quot;off&quot;.  In computer science, we
represent &quot;on&quot; by the digit 1 and &quot;off&quot; by the digit 0. 
Therefore, all computer data consists of long strings of 1’s and 0’s, like
101110101011011. These strings of 1’s and 0’s can represent instructions to the
computer, in which case they are called <b>machine language</b>.  The machine
language describing the computer's settings for a single CPU cycle is called an
<b>instruction</b>.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Strings of 1’s and 0’s can also represent numbers. 
Numbers represented using only 1’s and 0’s are called <b>binary numbers </b>(also
known as &quot;base 2&quot;), whereas numbers represented using the digits 0-9
are called <b>decimal numbers </b>(also known as &quot;base 10&quot;).  You
need to understand how to convert between binary and decimal numbers.  The
website for this class describes this in detail.  Each digit in a binary number
is called a <b>bit</b>.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 4: Assembly Language</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>When executing a program stored in memory, computers
employ <b>sequential execution</b>: instructions are executed one after the
other in the order they are stored in memory.  However, certain special
instructions cause a <b>branch</b> or <b>jump</b> to an instruction at a
different location in the memory.  </p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Two special registers help control sequential execution. 
The <b>program counter</b> (PC) register stores the memory address of the
instruction that will be executed next.  The <b>instruction register</b> (IR)
stores a copy of the instruction currently being executed.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Although each instruction can be represented in machine
language as a string of 1’s and 0’s, these strings are too complicated for
humans to deal with so instead we use an equivalent but simpler representation
of instructions called <b>assembly language</b>.  Typical assembly language
instructions look like “LOAD R0 8” and “ADD R2 R0 R1”.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 5: Objects and Classes</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Assembly language and machine language are <b>low-level </b>programming
languages, which means they accurately describe the inner workings of the
computer.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>In the remainder of the course, we study the <b>Java </b>programming
language.  Java is a <b>high-level</b> programming language, which means it is
more similar to English than a low-level language.  </p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>We will learn Java using a program called BlueJ.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Java is an <b>object-oriented</b> programming language, which
means that its programs use objects.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>An <b>object</b> is a collection of <b>data</b>, and a
list of <b>actions</b> that can be performed on the data.  Every object belongs
to a class.  A <b>class</b> is a description of all possible objects with the
same type of data and the same list of actions, together with some recipes
(called <b>constructors</b>) for creating new objects.  An object that belongs
to a class is called an <b>instance </b>of that class.  Two different instances
of the same class can have different values for their data (e.g. color =
“green” vs color = “red”), but they must have the same type of data and the
same list of actions.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Informally speaking, a class is a description of a
category of objects, whereas an object is a representation of a specific item
from the class.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>In Java, the actions that can be performed on an object's
data are called <b>methods</b>.  To perform an action on an object, you <b>invoke
</b>or <b>call</b> the relevant method.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Most methods need to be given extra information
describing the action they must perform.  For example, a method that deposits
money into a bank account must be told the amount of the deposit.  Each piece
of information that must be given to a method is called a <b>parameter</b>. 
Each parameter has two parts, (i) a <b>data type</b> describing what sort of
information it stores, and (ii) a <b>parameter name</b>, which is the name Java
will use to refer to the parameter.  </p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>In Java, each method lists all of the parameters it needs
in parentheses after the method name.  This list of parameters is called the <b>parameter
list</b>. Common data types for parameters in Java include <span
style='font-family:"Courier New"'>String</span> and <span style='font-family:
"Courier New"'>int</span>.  (<span style='font-family:"Courier New"'>String </span>is
used for storing strings of characters, like “abcd” or “green”; <span
style='font-family:"Courier New"'>int</span> is used for storing whole numbers
like 8 or -53.  In Java, strings must be surrounded by quotation marks.) Here
are two examples of parameter lists:  The parameter list for a <span
style='font-family:"Courier New"'>deposit </span>method might be <span
style='font-family:"Courier New"'>(int amount)</span>.  The parameter list for
a <span style='font-family:"Courier New"'>changeColorAndSize</span> method
might be <span style='font-family:"Courier New"'>(String newColor, int newSize)</span>.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 6: Object state</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Recall that an object consists of some data and a list of
actions that can be performed on the data.  An object's data is also called its
“state”, “attributes”, “instance variables” or “fields”.  All of these words
mean basically the same thing, but “fields” is the most commonly-used technical
term in computer programming.  Each <b>field</b> in an object stores exactly
one piece of data.  Just like a parameter, a field has a data type (e.g. <span
style='font-family:"Courier New"'>String</span> or <span style='font-family:
"Courier New"'>int</span>) describing what sort of information it stores, and a
name.  </p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Recall that a class is a description of all objects with
the same type of data and the same list of actions, together with some recipes
(called <b>constructors</b>) for creating new objects.  In Java, you write a
class description in a file whose name ends in “<span style='font-family:"Courier New"'>.java</span>”.
The file has three main components: </p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
dir=LTR></span>Fields</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
dir=LTR></span>Constructors</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'>3.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
dir=LTR></span>Methods</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The contents of a Java class file is called Java <b>source
code</b>, or just <b>code</b>.  As we already know, computers can only execute
instructions written in machine language.  So before you can run a Java
program, you must translate the source code into machine language.  Translating
source code into machine language is called <b>compiling </b>the source code. 
The program that does this translation is called a <b>compiler</b>.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>You can view the source code for a class in BlueJ by
double-clicking on it.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 7: Objects and Methods</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>As we know, every field and every parameter has a data
type.  In Java, there are two kinds of data types:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
dir=LTR></span><b>primitive data types</b>, which are built in to Java (e.g. <span
style='font-family:"Courier New"'>int</span>)</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
dir=LTR></span><b>object data types</b>, which are defined by programmers (e.g.
<span style='font-family:"Courier New"'>Circle</span>)</p>

<p class=MsoNoSpacing>Every class defines its own new object data type.  For
example, the file <span style='font-family:"Courier New"'>Circle.java</span>
defines the <span style='font-family:"Courier New"'>Circle</span> data type. 
Parameters and fields can have object data types.  For example, a <span
style='font-family:"Courier New"'>Picture </span>object might have a field “<span
style='font-family:"Courier New"'>Circle sun</span>” -- a field whose name is <span
style='font-family:"Courier New"'>sun</span> and whose data type is <span
style='font-family:"Courier New"'>Circle</span>.  </p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Recall that every method performs an action on the data
of an object.  Some methods <i>change</i> the data -- these are called <b>mutator</b>
methods.  Other methods merely <i>examine</i> the data and return some useful
information about it -- these are called <b>accessor</b> methods.  The type of
data returned by a method is called its <b>return type</b>.  The value returned
by a method is called its <b>return value</b>.  For example, the <span
style='font-family:"Courier New"'>GetBalance()</span> method of a <span
style='font-family:"Courier New"'>BankAccount</span> class might have a return
type <span style='font-family:"Courier New"'>int</span>, and invoking <span
style='font-family:"Courier New"'>GetBalance()</span> on some particular bank
account might result in the return value 57.  Methods that don't return any
information have the special return type <span style='font-family:"Courier New"'>void</span>. 
Therefore, mutator methods usually have return type <span style='font-family:
"Courier New"'>void</span>.  Accessor methods usually have a non-<span
style='font-family:"Courier New"'>void</span> return type.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>So parameters describe the <i>inputs</i> to a method, and
the return type describes the <i>output</i> of a method.  The inputs and
outputs a method are summarized by the <b>method signature</b>, which consists
of</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
dir=LTR></span>return type</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
dir=LTR></span>method name</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'>3.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
dir=LTR></span>parameter list</p>

<p class=MsoNoSpacing>The precise format of a method signature is as follows:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>               <i><span style='font-family:"Courier New"'>returnType</span></i><span
style='font-family:"Courier New"'> <i>methodName</i> ( <i>parameterList</i> )</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>For example, in the method signature</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>               <span style='font-family:"Courier New"'>void
enrollStudent ( Student newStudent )</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>the return type is <span style='font-family:"Courier New"'>void</span>,
the method name is <span style='font-family:"Courier New"'>enrollStudent</span>,
and the parameter list consists of a single parameter whose name is <span
style='font-family:"Courier New"'>newStudent</span> and whose data type is <span
style='font-family:"Courier New"'>Student</span>.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>You can view a summary of the method signatures (and
certain other information) of a class in BlueJ by first viewing the source code
of the class and then selecting the <b>documentation view</b>.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 8: Fields, Constructors and Assignment
Statements</b></p>

<p class=MsoNoSpacing><b>&nbsp;</b></p>

<p class=MsoNoSpacing>Methods can provide information about an object in two
very different ways: (i) as a return value, and (ii) by printing information on
the screen.  Information printed on the screen can only be used by humans who
read it, whereas information provided as a return value can be used by other
parts of a Java program.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>To write Java programs, you need to know the correct
names of certain punctuation characters:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>( ) – <b>parentheses</b></p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>{ } – <b>braces </b>(or “curly braces”)</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>[ ] – <b>brackets</b> (or “square brackets”)</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>;   -- <b>semicolon</b></p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>/  --<b> forward slash</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The source code for a class definition in Java has the
following structure (note the braces):</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>               <span style='font-family:"Courier New"'>public
class <i>ClassName</i> {         </span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>           <i>field
definitions</i></span></p>

<p class=MsoNoSpacing><i><span style='font-family:"Courier New"'>           constructor
definitions</span></i></p>

<p class=MsoNoSpacing><i><span style='font-family:"Courier New"'>           method
definitions</span></i></p>

<p class=MsoNoSpacing style='text-indent:.5in'><span style='font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNoSpacing>A field definition in Java has the following structure
(note the semicolon):</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>               <span style='font-family:"Courier New"'>private
<i>dataType fieldName</i>;</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>For example,</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>               <span style='font-family:"Courier New"'>private
int numStudents;</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Any line of Java code that starts with // (two forward
slashes) is called a <b>comment</b>.  Comments are ignored by the compiler but
are useful for humans reading the code.  If // occurs in the middle of a line,
then everything after the // is also a comment.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Any code that occurs between the two special symbols /**
and */ is also treated as a comment by the compiler, but it is a special type
of comment called a <b>JavaDoc comment</b>.  JavaDoc comments should be
provided for every class and every method, and are used to automatically create
helpful documentation for human readers.  You can see the results in BlueJ's
interface view.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>To store a value in Java, you use an <b>assignment
statement</b>.  The structure of an assignment statement is:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     <i>locationName</i>
= <i>value</i>;</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>This might look backwards until you get used to it: note
that the value on the <i>right</i> gets stored in the location named on the <i>left</i>. 
The only locations for storing values that we know about right now are fields.
For example,</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>               <span style='font-family:"Courier New"'>numStudents
= 5;</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNoSpacing>This stores the value 5 in the field called <span
style='font-family:"Courier New"'>numStudents</span>.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The = (equals sign) in an assignment statement is called
the <b>assignment operator</b>.  When reading Java code out loud, the
assignment operator should always be read as “gets the value” (not “equals”),
because an assignment statement actually moves data from one place to another. 
For example, the Java code<span style='font-family:"Courier New"'> numStudents
= 5 </span>should be read out loud as &quot;numStudents gets the value
five&quot;.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The value that appears on the right-hand side of an
assignment statement is actually known as an <b>expression</b>, and can be
quite complicated.  For example, in the assignment statement</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing style='text-indent:.5in'><span style='font-family:"Courier New"'>numStudents
= 5 + numJuniors - numSeniors;</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>the code <span style='font-family:"Courier New"'>5 +
numJuniors – numSeniors </span>is an expression.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The two sides of an assignment statement must have the
same data type.   For example, you cannot assign a value of type <span
style='font-family:"Courier New"'>String</span> to a field of type <span
style='font-family:"Courier New"'>int</span>.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Whenever a method or constructor with parameters is
invoked, the parameters are given some particular values.  Those particular
values are called <b>actual parameters</b> or <b>arguments</b>.  When the
source code of a method is considered on its own, the parameters do not have
any particular values, and are referred to as <b>formal parameters</b>.  For
example, a method whose signature is</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     void deposit
( int amountDeposited )</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>has one formal parameter (amountDeposited).  Whenever the
method is invoked, amountDeposited will be given an actual value (e.g. 535),
which is the actual parameter or argument.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>In Java code, the names of formal parameters and fields
can only be used in certain zones. The zone in which a name can be used is
called its <b>scope</b>.  The scope of a formal parameter is its method or
constructor definition.  The scope of a field is its class definition.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>In Java, a <b>statement</b> is a piece of code that ends
in a semicolon (and doesn't contain other semicolons).  A <b>block</b> of code
is a sequence of statements enclosed in curly braces.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The structure of a constructor definition in Java is:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing style='margin-left:.5in'><i><span style='font-family:
"Courier New"'>JavaDoc comment</span></i></p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>public</span><i><span
style='font-family:"Courier New"'> ClassName ( parameterList )</span></i></p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>{</span></p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:.5in'><i><span
style='font-family:"Courier New"'>constructorBody</span></i></p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The constructor body is a block of code that is executed
whenever the constructor is invoked.  The main purpose of the constructor body
is to <b>initialize</b> the fields, which means they are given definite initial
values.  If the initial value of a field is always the same, it is called a <b>default</b>
value (e.g. <span style='font-family:"Courier New"'>maxStudents = 5</span>
gives the field <span style='font-family:"Courier New"'>maxStudents</span> the
default value 5).  Otherwise, the initial value of a field is usually assigned
the value of one of the constructor's actual parameters (e.g. if a constructor
has a formal parameter named <span style='font-family:"Courier New"'>initMaxStudents</span>,
the constructor body might include the statement <span style='font-family:"Courier New"'>maxStudents
= initMaxStudents</span>).</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 9: Defining Methods</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The structure of a method definition in Java is:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing style='margin-left:.5in'><i><span style='font-family:
"Courier New"'>JavaDoc comment</span></i></p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>public</span><i><span
style='font-family:"Courier New"'> returnType</span></i><span style='font-family:
"Courier New"'> <i>methodName</i> ( <i>parameterList</i> )</span></p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>{</span></p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:.5in'><i><span
style='font-family:"Courier New"'>methodBody</span></i></p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The method body is a block of code that is executed
whenever the method is invoked.  </p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Accessor methods return a value by using Java's <b><span
style='font-family:"Courier New"'>return</span></b> statement.  For example,
the statement </p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing style='text-indent:.5in'><span style='font-family:"Courier New"'>return
34;</span> </p>

<p class=MsoNoSpacing style='text-indent:.5in'>&nbsp;</p>

<p class=MsoNoSpacing>returns the value 34.  The statement </p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing style='text-indent:.5in'><span style='font-family:"Courier New"'>return
numStudents;</span> </p>

<p class=MsoNoSpacing style='text-indent:.5in'>&nbsp;</p>

<p class=MsoNoSpacing>returns the value stored in the field numStudents.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>To ensure code is easy to read, each block must be <b>indented</b>
from the enclosing block of code.  In this course, we use four spaces of
indentation between blocks.  BlueJ often guesses the correct amount of
indentation for you: exploit this by hitting the “enter” key from the end of
the previous line, or you can backspace to the start of the current line and
then hit the “tab” key.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Whenever the compiler discovers an error in your code, it
issues an error message, and BlueJ highlights the line where the compiler got
confused.  The error message is sometimes helpful (e.g. “missing semicolon”),
but often it is misleading for inexperienced programmers (e.g “illegal start of
expression”).  Note that the mistake in your code is often <i>earlier</i> than
the highlighted line.  Very often, this occurs because of unbalanced braces —
most often, a missing close-brace, ‘}’.   Note that BlueJ helps you check for
balanced braces by highlighting the matching brace whenever you place the
cursor immediately after a brace character.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 10: Printing, Strings and Integer Division</b></p>

<p class=MsoNoSpacing><b>&nbsp;</b></p>

<p class=MsoNoSpacing>The output of a program is usually displayed in a <b>terminal
window</b>.  Java programs display output by using the built-in <b><span
style='font-family:"Courier New"'>System.out.println</span></b> method.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>In Java, two strings can be joined together, or <b>concatenated</b>,
using a + (plus sign).  When used between two strings, a plus sign is called
the <b>concatenation operator</b>.  A plus sign also functions as a
concatenation operator when used between a string and a number.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>But when a plus sign is used between two numbers, it
functions as an <b>addition operator</b>, and produces the sum of the two
numbers.  Arithmetic in Java is performed using the following symbols:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>addition : +</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>subtraction: -</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>multiplication: *</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>division: /</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>remainder: %</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>You can use parentheses to prioritize arithmetic.  For
example, 5 * (2 + 4) evaluates to 30, but (5 * 2) + 4 evaluates to 14.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Data types have an extremely important effect on
arithmetic performed in Java.  In particular, <i>dividing one integer by another
integer always produces an integer</i>.  This is called <b>integer division</b>. 
For example, <span style='font-family:"Courier New"'>19 / 5</span> evaluates to
3,  because you can fit three 5’s into 19 and have 4 left over.  The amount
left over is called the remainder, and in Java is produced by the <b>remainder
operator</b> (%).  So in Java, <span style='font-family:"Courier New"'>19 % 5</span>
evaluates to 4.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 11: Another Class Example</b></p>

<p class=MsoNoSpacing><b>&nbsp;</b></p>

<p class=MsoNoSpacing><b>double</b> is a primitive data type for storing
numbers that aren't necessarily integers, like 8.32 or -432.1.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>boolean</b> is a primitive data type for storing one
of the two possible values <b>true</b> and <b>false</b>.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>A <b>default constructor </b>is a constructor that has no
parameters, and therefore must assign a default value to every field.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Constructors that are not default constructors have at
least one parameter, and the parameters are used to set the initial values of
some of the fields.  Other fields might still be given default values. 
Non-default constructors are sometimes referred to by the number of parameters,
or arguments, they have.  For example, a constructor with 4 parameters is
called a <b>4-argument constructor</b>.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Constructor parameters are often named using the
following convention: take the field name, capitalize it, and add the string “<span
style='font-family:"Courier New"'>init</span>” in front.  For example, if there
is a field called <span style='font-family:"Courier New"'>numWombats</span> and
then the constructor parameter specifying the initial value for this field
would typically be called <span style='font-family:"Courier New"'>initNumWombats</span>. 
The letters “<span style='font-family:"Courier New"'>init</span>” remind us
that this parameter specifies the <i>initial </i>value of the field.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>When writing code, compile frequently so that you detect
errors as soon as possible.  If you have a compiler error, never continue to
write new code -- always correct the error first.  It will be far harder to
correct the error later.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Our course uses an automated grading system called <b>Web-CAT</b>. 
When filling in the body of a method or constructor that will be tested by
Web-CAT, never change the signature – Web-CAT depends on the signature to test
your code.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 12: Mutators and Unit Testing</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Compilers can only detect elementary errors in your
code.  Other errors (also called <b>bugs</b>) must be found by <b>testing</b>,
which means running the code and checking that it does what you expect. 
Testing manually is very tedious, so software developers use automated
testing.  <b>Junit</b> is a popular automated testing tool for Java, and BlueJ
provides convenient ways of using it.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>To perform testing in BlueJ, you first create a <b>test
class</b>, and then create a <b>test method</b> for every automated test to be
run.  There should be at least a separate test method for every constructor,
and every mutator method.  Some mutator methods require more than one test
method.  Accessor methods do not require test methods.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The most important rule of software development is:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing align=center style='text-align:center'><b>code a little,
test a little</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>In other words,  <i>never start writing a new constructor
or a new method until you have fully tested the one you just wrote</i>.  In
order to test a constructor, you must first write all of the accessor methods:
this is the only exception to writing new code before testing existing code.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The main reason for “code a little, test a little” is to
save you time: bugs in existing code tend to cause bugs in new code, so by
eliminating bugs as early as possible you reduce the total number of bugs.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>For each kind of Java code that we learn about, there
will be a <b>testing rule</b> that states how to test that kind of Java. 
Recall that testing requires you to check that the code did what you expected;
this check is called an <b>assertion</b>.  For example, you can assert that the
return value of the <span style='font-family:"Courier New"'>getNumWombats() </span>method
is 5.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The <b>testing rule for constructors and accessors</b>
is:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>one test method for each constructor</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>create an object using the constructor being
tested</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>call the accessor for each field and make an
assertion</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 13: Multiple tests and local variables</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Some mutator methods have several different kinds of
behavior that are possible.  (For example, we saw in class a <span
style='font-family:"Courier New"'>rotate()</span> method that behaved
differently depending on whether the resulting rotation was larger or smaller
than 360.)  To test a method that has multiple behaviors, you need a separate
test method for each behavior.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>A <b>local variable</b> is a named location where you can
temporarily store a value.  You must <b>declare</b> a local variable before you
can use it for storing values.  The format for a local variable declaration is:</p>

<p class=MsoNoSpacing>               </p>

<p class=MsoNoSpacing style='text-indent:.5in'><i><span style='font-family:
"Courier New"'>dataType variableName</span></i><span style='font-family:"Courier New"'>;</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>For example,</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     int
newAngle;</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>is a local variable declaration.  A local variable must
be declared <i>inside</i> a method. The scope of a local variable is the method
in which you declare it.  So you cannot refer to a local variable outside its
own method.  Also, you must declare a  local variable before you refer to it.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>It is possible to store an initial value in a local variable
at the same time as declaring it.  The format for simultaneously declaring and
initializing a local variable is:</p>

<p class=MsoNoSpacing>               </p>

<p class=MsoNoSpacing style='text-indent:.5in'><i><span style='font-family:
"Courier New"'>dataType variableName </span></i><span style='font-family:"Courier New"'>=<i>
initialValue </i>;</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>For example,</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     int newAngle
= 85;</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     int anotherAngle
= angle + degrees;</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>are two valid local variable declarations</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 14: Conditional statements</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>In Java, a <b>Boolean expression </b>is a piece of code
that evaluates to either <span style='font-family:"Courier New"'>true </span>or
<span style='font-family:"Courier New"'>false</span>.  For example,  <span
style='font-family:"Courier New"'>balance – amount &gt; 0</span> is a Boolean
expression.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Boolean expressions often use <b>relational operators </b>to
compare values.  The relational operators in Java are:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing style='margin-left:.5in'>&lt;             less than</p>

<p class=MsoNoSpacing style='margin-left:.5in'>&lt;=           less than or
equal to</p>

<p class=MsoNoSpacing style='margin-left:.5in'>&gt;             greater than</p>

<p class=MsoNoSpacing style='margin-left:.5in'>&gt;=           greater than or
equal to</p>

<p class=MsoNoSpacing style='margin-left:.5in'>==           is equal to</p>

<p class=MsoNoSpacing style='margin-left:.5in'>!=           is not equal to</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Note the difference between “==” and “=”.  The double
equals-sign “==”  tests whether two things are equal.  A single equals-sign “=”
stores a value in an assignment statement.  Using “=” when you intend “==” is a
common programming error and causes severe bugs.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>In Java, the format of a <b>conditional statement</b>,
also known as an “<b>if statement</b>”, is:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>if (<i>condition</i>)
{</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     <i>statements
to execute if condition is true</i></span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>else {</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     <i>statements
to execute if condition is false</i></span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNoSpacing>In the above code, the condition in parentheses must be a
Boolean expression.  Each block of code between braces is called a <b>clause</b>. 
So a conditional statement has an “if clause” and an “else clause”.  The else
clause is in fact optional and can be omitted, resulting in a conditional
statement as follows:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>if (<i>condition</i>)
{</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     <i>statements
to execute if condition is true</i></span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>An important goal of software testing is to achieve <b>statement
coverage</b>.  This means that your suite of tests causes every line of code to
be executed at least once.  This principle leads to the <b>testing rule for
conditional statements</b>:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>create a separate test method for each clause
in a conditional statement</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 15: Nested and Cascading Conditional Statements</b></p>

<p class=MsoNoSpacing><b>&nbsp;</b></p>

<p class=MsoNoSpacing>To test for more than two possibilities, you can use a <b>cascading
if statement</b>:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>if (<i>condition1</i>)
{</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     <i>statements
to execute if condition1 is true</i></span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>else if (<i>condition2</i>)
{</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     <i>statements
to execute if condition2 is true</i></span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>.</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>.</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>.</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>else if (<i>conditionX</i>)
{</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     <i>statements
to execute if conditionX is true</i></span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>else {</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     <i>statements
to execute if all conditions are false</i></span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Another way to test for multiple possibilities is to
insert an if statement inside one or more of the clauses of another if
statement.  This is called a <b>nested if statement</b>.  For example, the
following format uses a nested if statement to test for 4 different
possibilities:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>if (<i>condition1</i>)
{</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     if (<i>condition2</i>)
{</span></p>

<p class=MsoNoSpacing style='margin-left:1.0in'><i><span style='font-family:
"Courier New"'>statements to execute if condition1 is true and condition2 is
true</span></i></p>

<p class=MsoNoSpacing style='text-indent:.5in'><span style='font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing style='text-indent:.5in'><span style='font-family:"Courier New"'>else
{</span></p>

<p class=MsoNoSpacing style='margin-left:1.0in'><i><span style='font-family:
"Courier New"'>statements to execute if condition1 is true and condition2 is false</span></i></p>

<p class=MsoNoSpacing style='text-indent:.5in'><span style='font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>else {</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     if (<i>condition3</i>)
{</span></p>

<p class=MsoNoSpacing style='margin-left:1.0in'><i><span style='font-family:
"Courier New"'>statements to execute if condition1 is false and condition3 is
true</span></i></p>

<p class=MsoNoSpacing style='text-indent:.5in'><span style='font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing style='text-indent:.5in'><span style='font-family:"Courier New"'>else
{</span></p>

<p class=MsoNoSpacing style='margin-left:1.0in'><i><span style='font-family:
"Courier New"'>statements to execute if condition1 is false and condition3 is
false</span></i></p>

<p class=MsoNoSpacing style='text-indent:.5in'><span style='font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>A <b>debugger</b> is a piece of software that lets you
examine computer programs while they are executing.  Debuggers are very useful
for finding bugs in programs.  BlueJ includes a debugger.  Debuggers allow you
to set a <b>breakpoint</b> at any line of code in a program.  The program will
temporarily halt at each breakpoint, and give you a chance to examine its
state.  Debuggers also allow you to <b>single step</b> through a program, which
means the program stops after every statement.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 16: Boolean Operators</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Boolean expressions can be combined using <b>Boolean
operators</b>:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>&amp;&amp;</span>          and</p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>||</span>          or</p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>!</span>            not</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The technical meanings of these operators are:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<div align=center>

<table class=MsoTableGrid border=0 cellspacing=0 cellpadding=0
 style='margin-left:47.7pt;border-collapse:collapse;border:none'>
 <tr>
  <td width=110 valign=top style='width:65.7pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNoSpacing align=center style='text-align:center'>P <span
  style='font-family:"Courier New"'>&amp;&amp;</span> Q</p>
  </td>
  <td width=495 valign=top style='width:297.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNoSpacing>true only if P is true and Q is true</p>
  </td>
 </tr>
 <tr>
  <td width=110 valign=top style='width:65.7pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNoSpacing align=center style='text-align:center'>P <span
  style='font-family:"Courier New"'>||</span> Q</p>
  </td>
  <td width=495 valign=top style='width:297.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNoSpacing>true if P is true, or if Q is true, or if both are true</p>
  </td>
 </tr>
 <tr>
  <td width=110 valign=top style='width:65.7pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNoSpacing align=center style='text-align:center'><span
  style='font-family:"Courier New"'>!</span>P</p>
  </td>
  <td width=495 valign=top style='width:297.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNoSpacing>true if P is false</p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Here are some examples of Boolean expressions that use
Boolean operators:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><span style='font-family:"Courier New"'>(x
&gt; 3) &amp;&amp; (x &lt; 10)</span></p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><span style='font-family:"Courier New"'>(x
== 2) || (x == 3)</span></p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><span style='font-family:"Courier New"'>!(x
== 2)</span></p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><span style='font-family:"Courier New"'>(x
!= 2) || !(x &lt; 3)</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 17: Composition</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Composition</b> is the use of objects as fields in
other objects.  Composition helps programmers manage complexity by allowing
complex objects to be built out of simpler ones.  In particular, composition is
used in the following four important principles of software design:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><b>Divide and Conquer: </b>complex problems
are broken down into smaller, simpler sub-problems.</p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span>benefit: it is easier to solve smaller
problems.</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><b>Modularization</b>: problems are divided
so that the simpler sub-problems (also called <b>modules</b>)  (i) are
relatively independent, and (ii) interact in well-defined ways.</p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span>benefits:</p>

<p class=MsoNoSpacing style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span dir=LTR></span>division of labor: independent problems can
be assigned to separate people or teams</p>

<p class=MsoNoSpacing style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span dir=LTR></span>localized changes: a change in the way one
module works often has little or no effect on other modules</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><b>Reuse</b>: existing components can be
reused in new software</p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span>benefit: it is less work to reuse existing
code than to write new code</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><b>Abstraction</b>: a component can be used
without understanding its implementation details</p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span>benefit: a complex problem can be solved
without any one person mastering all the details of all sub-problems</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 18: Design notation and implementing composition</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Recall that there are two kinds of data types in Java:
primitive data types and object data types.  Whenever a field, local variable,
or parameter has an object data type, it does not in fact store the entire
object.  The object itself is stored in some other location in the computer's
memory, and the field, local variable, or parameter stores only a <b>reference</b>
to the object.  A reference states where the object can be found in the
computer's memory.  You can think of it as an arrow pointing from the field,
local variable, or parameter to the actual location of the object.  </p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>If a reference does not point to any object, it has the
special value <b>null</b>.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>An <b>object diagram</b> shows the state of some objects
at a particular instant when running a computer program.  Each object is
represented by a box.  At the top of the box, the name and data type of the
object are displayed as follows:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing style='text-indent:.5in'>[<i>name</i>] : <i>datatype</i></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The name is in brackets because it is optional. 
Sometimes an object does not have a name, and sometimes it has more than one
name.  So we include object names on object diagrams when they are helpful, and
leave them out otherwise.  Below the name and data type of the object, each
field is listed as follows:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>               <i>fieldName</i> : <i>value</i></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>For fields that store primitive data types, the actual
value is listed.  For fields that store object data types, the field's
reference is depicted with an arrow pointing to another object on the object
diagram.  </p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>A <b>class diagram</b> shows the relationship between the
source code of different classes.  Each class is shown as a box with the class
name inside it.  If the source code of one class mentions another class (for
example, uses it as a field, local variable or parameter data type), then an
arrow is drawn from the first class to the second class.  This arrow is called
a “<b>uses</b>” arrow because the first class uses the second class.  </p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>A <b>static</b> property of a computer program depends
only on the source code and not the way the program is run.  A class diagram
depicts a static view of a program.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>A <b>dynamic</b> property of a computer program depends
on the way it is run.  An object diagram depicts a dynamic view of a program.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 19: Method Calls and Test Fixtures</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>You call a method in Java using the following <b>method
call</b> syntax:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>               <i>objectReference</i> . <i>methodName</i>
( <i>actualParameters</i> ) ;</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>For example, if <span style='font-family:"Courier New"'>savings</span>
is a reference to an object of type <span style='font-family:"Courier New"'>Account</span>,
which has a method with the signature <span style='font-family:"Courier New"'>void
deposit(int amount)</span>, then</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>               <span style='font-family:"Courier New"'>savings.deposit(25);</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNoSpacing>calls the <span style='font-family:"Courier New"'>deposit</span>
method on the <span style='font-family:"Courier New"'>savings</span> object
with <span style='font-family:"Courier New"'>amount</span> equal to 25.  It has
exactly the same effect as right-clicking on the <span style='font-family:"Courier New"'>savings</span>
object in BlueJ, selecting the <span style='font-family:"Courier New"'>deposit</span>
method, and entering the value 25 for the parameter.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The object to the left of the period in a method call is
the <b>calling object</b>.  It is the object on which the method operates.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>A <b>test fixture</b> is a collection of objects that are
automatically re-created before each test method is run.  Using a test fixture
saves work by automating the setup for every test.  In BlueJ, you create a test
fixture as follows:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
dir=LTR></span>Manually create the set of objects that you will use for testing</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
dir=LTR></span>Right-click on the test class and select “Object Bench to Test
Fixture”</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>You can add objects to a test fixture as follows:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
dir=LTR></span>Select “Test Fixture to Object Bench”</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
dir=LTR></span>Add new objects</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'>3.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
dir=LTR></span>Select “Object Bench to Test Fixture”</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 20: More Method Calls, </b><b><span
style='font-family:"Courier New"'>this</span> and </b><b><span
style='font-family:"Courier New"'>null</span></b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>As we know, every constructor and method is executed on
behalf of some particular object, known as the <i>calling object</i>.  In Java,
the special keyword <b><span style='font-family:"Courier New"'>this</span></b>
can be used as a reference to the calling object.  For example, <span
style='font-family:"Courier New"'>this.age</span> is the age field of the calling
object, and <span style='font-family:"Courier New"'>this.increaseWeight(23)</span>
invokes the <span style='font-family:"Courier New"'>increaseWeight </span>method
on the calling object.  The keyword <span style='font-family:"Courier New"'>this</span>
can often be omitted, since the compiler assumes you are referring to the
calling object except in certain exceptional situations.  So <span
style='font-family:"Courier New"'>increaseWeight(23)</span>almost always means
the same thing as <span style='font-family:"Courier New"'>this.increaseWeight(23)</span>.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>One very important use of <span style='font-family:"Courier New"'>this</span>
is to remove ambiguity when a parameter and a field have the same name.  In
this case, the compiler assumes you are referring to the parameter unless you
use <span style='font-family:"Courier New"'>this</span>.  Programmers often use
this technique for writing constructors: instead of using constructor
parameters that start with “<span style='font-family:"Courier New"'>init</span>”,
you can use parameters that have the same names as the fields, and instead
employ <span style='font-family:"Courier New"'>this</span> when necessary.  For
example,</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>public
Rectangle (int length, int width) {</span></p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>     this.length
= length;</span></p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>     this.width
= width;</span></p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>A frequent programming error is to invoke a method on an
object reference that is <span style='font-family:"Courier New"'>null</span>.  
In other words, the calling object is <span style='font-family:"Courier New"'>null</span>
and there is no object on which the method can be performed.  This results in a
<b><span style='font-family:"Courier New"'>NullPointerException</span></b>.</p>

<p class=MsoNoSpacing>                                                                                                              </p>

<p class=MsoNoSpacing><b>Topic 21: Calling Constructors, Collections and </b><b><span
style='font-family:"Courier New"'>ArrayList</span></b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>To call a constructor in Java, use the following pattern:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>new
<i>ClassName</i> ( <i>parameters</i> );</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The Java keyword <b><span style='font-family:"Courier New"'>new</span></b>
is known as the &quot;new operator&quot;.  It is always followed by a
constructor and creates a new object.  Usually, the new object is assigned to a
reference so it can be used later.  For example, if the <span style='font-family:
"Courier New"'>Account</span> class has a constructor with signature <span
style='font-family:"Courier New"'>Account(int balance, int interestRate)</span>
then the following code</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>Account savings;</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>savings = new
Account(5000, 12);</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>creates a new <span style='font-family:"Courier New"'>Account</span>
object with balance 5000 and interest rate 12, and stores a reference to the
new object in the local variable <span style='font-family:"Courier New"'>savings</span>.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Java provides many classes for storing collections of
objects; one of them is called  <b><span style='font-family:"Courier New"'>ArrayList</span></b>. 
An <span style='font-family:"Courier New"'>ArrayList</span> stores a list of
objects of a <i>single type</i>.  The objects are stored in an ordered list and
are numbered starting from 0.  Each object in the list is called an <b>element</b>,
and an element's numbered position in the list is called its <b>index</b>.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>A constructor for ArrayList specifies what type of
objects will be in the list, using the format:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>ArrayList
&lt; <i>ClassName</i> &gt; ( )</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>This constructor creates an empty list, where <i><span
style='font-family:"Courier New"'>ClassName</span></i> is the type of objects
to be stored in the list.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Four important methods of the ArrayList class are:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><span style='font-family:"Courier New"'>add(
<i>objectReference</i> )</span> -- adds the given object to the end of the list</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><span style='font-family:"Courier New"'>size(
)</span> -- returns the number of objects in the list</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><span style='font-family:"Courier New"'>get(
<i>index</i> )</span> -- returns a reference to the element at the specified
index</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><span style='font-family:"Courier New"'>remove(
<i>index</i> )</span> -- removes the element at the specified index; elements
after the removed element are shifted down so their indexes are reduced by one.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>When calling <span style='font-family:"Courier New"'>get</span>
or <span style='font-family:"Courier New"'>remove</span>, the specified index
must be valid: it must be &#8805; 0 and &lt; the size of the list.  An invalid
index causes an <b><span style='font-family:"Courier New"'>IndexOutOfBoundsException</span></b>.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The <span style='font-family:"Courier New"'>ArrayList</span>
class is provided with Java but is not automatically available.  <span
style='font-family:"Courier New"'>ArrayList</span> is part of the <b>Java Class
Library</b>.  The Java Class Library is organized into <b>packages</b>.  <span
style='font-family:"Courier New"'>ArrayList</span> is in the <span
style='font-family:"Courier New"'>java.util</span> package.  You can make <span
style='font-family:"Courier New"'>ArrayList</span> available using the Java
keyword <b><span style='font-family:"Courier New"'>import</span></b>.  So any
java file that uses <span style='font-family:"Courier New"'>ArrayList</span>
must first include the following line of code:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>import
java.util.ArrayList;</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 22: Returning Objects and Testing Collections</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>When a method's return type is an object data type, and
the method encounters an error, it is conventional to return the value <span
style='font-family:"Courier New"'>null</span>.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The <b>testing rule for methods that add to a collection</b>
is:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>add several elements</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>check the size of the collection</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>check the first and last elements</p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span>check just enough fields to verify the
expected elements are present</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The <b>testing rule for methods that get by index</b> is:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>add several elements</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>test getting from a negative index</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>test getting from an index that is too large</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>test getting from a valid index</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The <b>testing rule for methods that remove from a
collection</b> is:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>add several elements</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>remove an element from the middle of the
list</p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span>check the size of the collection</p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span>check the element that is now at the removed
index</p>

<p class=MsoNoSpacing style='margin-left:1.5in;text-indent:-.25in'><span
style='font-family:Wingdings'>§<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span dir=LTR></span>check just enough fields to verify the
expected element is present</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>test removing from a negative index</p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span>check only the size</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>test removing from an index that is too
large</p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span>check only the size</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 23: Iteration with </b><b><span
style='font-family:"Courier New"'>for</span> Loops</b></p>

<p class=MsoNoSpacing><b>&nbsp;</b></p>

<p class=MsoNoSpacing>The <b>increment operator</b> in Java is <span
style='font-family:"Courier New"'>++</span>. It increases the value of a
variable by 1.  So <span style='font-family:"Courier New"'>day++</span> has the
same effect as <span style='font-family:"Courier New"'>day = day + 1</span>.  </p>

<p class=MsoNoSpacing><b>&nbsp;</b></p>

<p class=MsoNoSpacing>The <b>decrement operator</b> in Java is <span
style='font-family:"Courier New"'>--</span>. It decreases the value of a
variable by 1.  So <span style='font-family:"Courier New"'>day--</span> has the
same effect as <span style='font-family:"Courier New"'>day = day - 1</span>.  </p>

<p class=MsoNoSpacing><b>&nbsp;</b></p>

<p class=MsoNoSpacing>To repeatedly execute the same piece of code a number of
times, you use a programming construct called a <b>loop</b>.  Each execution of
the loop code is called an <b>iteration</b>. Java provides at least three ways
to program a loop: for loops, while loops, and for-each loops.  The textbook
introduces for-each loops first, but we study for loops first.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The syntax of a <b>for loop</b> is:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>for
(<i>initializer</i>; <i>loopCondition</i>; <i>update</i>) {</span></p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>     <i>loopBody</i></span></p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>where:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><i><span style='font-family:"Courier New"'>initializer</span></i><span
style='font-family:"Courier New"'> </span>is executed once, before the first
iteration of the loop</p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span>typically initializes a <b>loop variable</b>,
which keeps track of how many iterations have been performed</p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span>e.g. <span style='font-family:"Courier New"'>int
day = 0</span></p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><i><span style='font-family:"Courier New"'>loopCondition</span></i><span
style='font-family:"Courier New"'> </span>is checked before each iteration of
the loop, and the loop is terminated if the loop condition is false</p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span>typically checks whether the loop variable
is still in the expected range</p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span>e.g. <span style='font-family:"Courier New"'>day
&lt; prices.size()</span></p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><i><span style='font-family:"Courier New"'>update</span></i>
is executed after each iteration of the loop</p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span>typically updates the loop variable ready
for the next iteration</p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span>e.g. <span style='font-family:"Courier New"'>day++</span></p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><i><span style='font-family:"Courier New"'>loopBody</span></i>
is executed on every iteration of the loop, and can consist of a large number
of statements</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><span lang=PT>For example,</span></p>

<p class=MsoNoSpacing><span lang=PT>&nbsp;</span></p>

<p class=MsoNoSpacing style='margin-left:.5in'><span lang=PT style='font-family:
"Courier New"'>for (int num = 0; num &lt; 5; num++) {</span></p>

<p class=MsoNoSpacing style='margin-left:.5in'><span lang=PT style='font-family:
"Courier New"'>     </span><span style='font-family:"Courier New"'>System.out.println(num);</span></p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>prints the numbers 0, 1, 2, 3, 4 on separate lines.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Note carefully the execution order of the statements in a
for loop.  Let's use the abbreviations INIT for initializer, LC for loop
condition, U for update and LB for loop body.   Then the order of execution is:
</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>INIT, LC, LB, U,  LC, LB, U,  LC, LB, U,  LC, ... [stops
the first time LC is false]</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Special Topic: History of Computers</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Fundamental computer components, from earliest to most
recent, include:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>earliest computers were completely <b>mechanical</b></p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><b>electro-mechanical relays</b> still used
moving parts, but were powered electrically</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><b>vacuum tubes</b> had no moving parts but
were still large and unreliable</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><b>transistors</b> were smaller and more
reliable</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><b>integrated circuits</b> are silicon chips
with etched circuits that act like transistors -- initially tens of transistors
per chip, but these days hundreds of millions</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>John von Neumann helped invent the stored program
architecture and build EDVAC (1948), an early stored program computer.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 24: Computing Aggregate Data</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>To compute aggregate data, use a local variable to
accumulate data from every execution of a loop.  For example, to add the
numbers from 10 to 20 and print the result:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing style='margin-left:.5in'><span lang=PT style='font-family:
"Courier New"'>int total = 0;</span></p>

<p class=MsoNoSpacing style='margin-left:.5in'><span lang=PT style='font-family:
"Courier New"'>for (int num = 10; num &lt;= 20; num++) {</span></p>

<p class=MsoNoSpacing style='margin-left:.5in'><span lang=PT style='font-family:
"Courier New"'>     </span><span style='font-family:"Courier New"'>total =
total + num;</span></p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>System.out.println(total);</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The <b>testing rule for methods that compute an aggregate
result over a collection</b> is:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>in one test method, add several elements to
the collection, then call the &quot;aggregate&quot; method and check that the
result is correct </p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>in another test method, use an empty
collection to call the &quot;aggregate&quot; method and check that the result
is correct</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 25: Modifying Elements and Searching Collections</b></p>

<p class=MsoNoSpacing><b>&nbsp;</b></p>

<p class=MsoNoSpacing>To modify some or all of the elements in a collection,
simply iterate through the collection and perform the desired action on each
element.  For example,</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNormal><span style='font-family:"Courier New"'>   /**</span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>*
Increase the number of rental nights on each rented</span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>*
DVD by 1 night.</span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>*/</span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>public
void increaseRentalNights() {</span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>     //
For each DVD in the store.</span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>     for
(int i=0; i&lt;dvdList.size(); i++) {</span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>          DVD
aDVD = dvdList.get(i);</span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>          //
if it is checked out.</span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>          if
(aDVD.getNightsRented() &gt; 0) {</span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>               //
increase its rental nights.</span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>               aDVD.addRentalNight();</span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>          }</span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>     }</span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The <b>testing rule for methods that modify elements of a
collection</b> is:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>modify the elements (call the method) </p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>check at least one modified element </p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>check at least one unmodified element (if
any) </p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>in each case, check the field(s) that could
have been modified</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>To <b>search a collection</b> for an object with a
particular property (such as the largest value of a given field), iterate
through the entire collection using one or more local variables to remember the
information you have gained so far.  For example,</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>public
DVD getLongestRental() {</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>      //
Local variable to remember the longest rental so far.</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>      DVD
longestDVD = null;</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>      int
longestNights = -1;</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>      //
Iterate through the rest of the DVDs.</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>      for
(int i=0; i&lt;dvdList.size(); i++) {</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>            DVD
aDVD = dvdList.get(i);</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>            //
If the current DVD has been rented longer than</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>            //
the longest one seen so far then set it</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>            //
as the longest so far.</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>            if
(aDVD.getNightsRented() &gt; longestNights) {</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>                  longestDVD
= aDVD;</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>                  longestNights
= aDVD.getNightsRented();</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>            }</span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-size:10.0pt;
font-family:"Courier New"'>}</span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-size:10.0pt;
font-family:"Courier New"'>return longestDVD;</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The <b>testing rule for methods that search a collection</b>
is</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>use one test method to test searching an
empty collection </p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>use another test method to test searching a
collection that does not contain the searched-for object </p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>use a third test method to test searching a
collection that does contain the searched-for object</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 26: While Loops</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The syntax of a <b>while</b> <b>loop</b> is:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>while
(<i>loopCondition</i>) {</span></p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>     <i>loopBody</i></span></p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>where:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><i><span style='font-family:"Courier New"'>loopCondition</span></i><span
style='font-family:"Courier New"'> </span>is checked before each iteration of
the loop, and the loop is terminated if the loop condition is false</p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span>e.g. <span style='font-family:"Courier New"'>day
&lt; prices.size()</span></p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><i><span style='font-family:"Courier New"'>loopBody</span></i>
is executed on every iteration of the loop, and can consist of a large number
of statements</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>For example, the code</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-size:11.0pt;
font-family:"Courier New"'>int x = 0;</span></p>

<p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>     while
(x &lt; 5) {</span></p>

<p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>           System.out.println(x);</span></p>

<p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>           x
= x + 1;</span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-size:11.0pt;
font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>prints the numbers 0, 1, 2, 3, 4 on separate lines.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>A common programming error is to write a loop that never
terminates.  This is called an <b>infinite loop</b>.  For example,</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-size:11.0pt;
font-family:"Courier New"'>int x = 0;</span></p>

<p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>     while
(x &lt; 5) {</span></p>

<p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>           System.out.println(x);</span></p>

<p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>           x
= x - 1;</span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-size:11.0pt;
font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>is an infinite loop.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 27: Returning a Collection</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Recall that the <span style='font-family:"Courier New"'>==</span>
operator tests whether two things are equal.  In fact, <span style='font-family:
"Courier New"'>==</span> behaves completely differently for primitive data
types and object data types.  For primitive data types, <span style='font-family:
"Courier New"'>==</span> is <span style='font-family:"Courier New"'>true</span>
whenever the compared values are equal.  But for object data types, <span
style='font-family:"Courier New"'>==</span> is <span style='font-family:"Courier New"'>true</span>
only when the compared references point to <i>exactly the same object</i>.  If
the references point to two different objects that happen to have the same
values for their fields, then <span style='font-family:"Courier New"'>==</span>
is <span style='font-family:"Courier New"'>false</span>.  Programmers usually
define a <b><span style='font-family:"Courier New"'>.equals()</span></b> method
for testing whether two objects have the same values in their fields.  This is
especially important for <span style='font-family:"Courier New"'>String</span>s. 
It is a common programming error to think that if we declare </p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>String
string1 = “abc”;</span></p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>String
string2 = “abc”;</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>then <span style='font-family:"Courier New"'>string1==string2</span>
 is  <span style='font-family:"Courier New"'>true</span>.  In fact, <span
style='font-family:"Courier New"'>string1==string2 </span>could be  <span
style='font-family:"Courier New"'>false </span>(because the two strings are
references to different objects), but <span style='font-family:"Courier New"'>string1.equals(string2)</span>
is <span style='font-family:"Courier New"'>true </span>(because the two strings
contain the same characters).   </p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>To write a <span style='font-family:"Courier New"'>.equals()</span>
method, you need to compare the calling object (using <span style='font-family:
"Courier New"'>this</span>) with another object passed in as a parameter, as in
the following example:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>public class
Account {</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     private int
balance;</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     private int
interestRate;</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     public
boolean equals(Account account) {</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>           if
(this.balance == account.balance</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>               &amp;&amp;
this.interestRate == account.interestRate) {</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>                return
true;</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>           } else
{</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>                return
false;</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>           }</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     }</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>To return a collection of objects: (1) create a new
collection, (2) add the desired objects using a loop, and (3) return the new collection. 
For example,</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>public
VideoStore getAllDVDsWithRating(String rating) {</span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-size:11.0pt;
font-family:"Courier New"'>// 1. Create a new empty VideoStore</span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-size:11.0pt;
font-family:"Courier New"'>VideoStore withRating = new VideoStore(rating + </span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:.5in'><span
style='font-size:11.0pt;font-family:"Courier New"'>“ Rated DVDs”);</span></p>

<p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>       
</span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-size:11.0pt;
font-family:"Courier New"'>// 2. Iterate through the DVDs, adding the suitable
ones</span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-size:11.0pt;
font-family:"Courier New"'>for (int i = 0; i &lt; dvdList.size(); i++) {</span></p>

<p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>           DVD
aDVD = dvdList.get(i);</span></p>

<p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>           //
If the DVD has the specified rating</span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:.5in'><span
style='font-size:11.0pt;font-family:"Courier New"'>// add it to the new
collection.</span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:.5in'><span
style='font-size:11.0pt;font-family:"Courier New"'>String curRating =
aDVD.getRating();</span></p>

<p class=MsoNormal style='margin-left:1.0in'><span style='font-size:11.0pt;
font-family:"Courier New"'>if (curRating.equals(rating)) {</span></p>

<p class=MsoNormal style='margin-left:1.0in;text-indent:.5in'><span
style='font-size:11.0pt;font-family:"Courier New"'>withRating.addDVD(aDVD);</span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:.5in'><span
style='font-size:11.0pt;font-family:"Courier New"'>}</span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-size:11.0pt;
font-family:"Courier New"'>}</span></p>

<p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>       
</span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-size:11.0pt;
font-family:"Courier New"'>// 3. Return the new collection.</span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-size:11.0pt;
font-family:"Courier New"'>return withRating;</span></p>

<p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The <b>testing rule for methods that return collections</b>
is:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>use one test method to check that the empty
collection is returned correctly </p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>in another test method, check that a
non-empty collection is returned correctly: </p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span>check the size of the collection </p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span>check the first and last elements (check
enough fields to be sure they are the ones you expect)</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 28: Arrays of Primitive Values</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Because ArrayLists store collections of <i>objects</i>,
it is not easy to store <i>primitive</i> values (like <span style='font-family:
"Courier New"'>7</span> or <span style='font-family:"Courier New"'>-3.2</span>
or <span style='font-family:"Courier New"'>true</span>) in an ArrayList. 
Instead, it is better to use another Java data structure called an <b>array</b>. 
Arrays are also more efficient than ArrayLists for many operations.  However,
arrays can store only a fixed number of elements (whereas it is easy to
increase or decrease the size of an ArrayList).  To summarize:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>use arrays for <i>fixed size</i> collections</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>advantages of arrays:</p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span>can store either <i>primitive values</i>  or
object references</p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span>accessing elements is more efficient than
ArrayList</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>disadvantage of arrays:</p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span>cannot add or remove elements</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>To declare an array, use a pair of square brackets <span
style='font-family:"Courier New"'>[]</span> after the data type you would like
to store in the array.  For example,</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>               <span style='font-family:"Courier New"'>double[]
prices;</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>declares a reference <span style='font-family:"Courier New"'>prices</span>
that will point to an array of <span style='font-family:"Courier New"'>double </span>values.  
To actually create the array, use the <span style='font-family:"Courier New"'>new</span>
operator and specify the size of the array between the square brackets.  For
example, after the above declaration you could use</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     prices = new
double[3];</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>This creates an array that holds 3 elements of type <span
style='font-family:"Courier New"'>double</span>.  </p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>As with ArrayLists, the elements of an array are stored
in a fixed order, and the position of an element in this order is called its
index.  The smallest index is 0, not 1.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>To get the value of an array element, use the name of the
array followed by square brackets with the desired index inside.  For instance,</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     double
myPrice = prices[2];</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>stores the value of element 2 of the <span
style='font-family:"Courier New"'>prices</span> array in the local variable <span
style='font-family:"Courier New"'>myPrice</span>.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>To set the value of an array element, use an ordinary
assignment statement whose left-hand side is the name of the array followed by
square brackets with the desired index inside.  For instance,</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     prices[1] =
78.33;</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>sets the value of element 1 of the <span
style='font-family:"Courier New"'>prices</span> array to 78.33.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>You can combine the getting and setting of array elements
in a single statement, such as</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     prices[0] =
2*prices[1] + prices[2];</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The length or size of an array is obtained by using <span
style='font-family:"Courier New"'>.length</span> after the array name.  For
example,</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     int len =
prices.length;</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Note that <span style='font-family:"Courier New"'>length</span>
is a field, not a method, which is why it is not correct to use parentheses –
so  <span style='font-family:"Courier New"'>prices.length()</span> is wrong.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 29: Scanning Arrays</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The elements of an array can be searched or altered in
exactly the same ways as for ArrayLists.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 30: Array Processing</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>When a loop appears inside the body of another loop, the
resulting code is called a <b>nested loop</b>.  The two loops in a nested loop
are called the <b>inner loop</b> and the <b>outer loop</b>.  In a nested loop,
all iterations of the inner loop body are executed for every single iteration
of the outer loop.  For example, here is a nested for loop:</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>           for
(int i = 0; i &lt; 3; i++) {</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>                for
(int j = 0; j &lt; 2 ; j++) {</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>                       System.out.println(i
+ &quot;,&quot; + j);</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>                }</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>           }</span></p>

<p class=MsoNoSpacing>This produces the output:</p>

<p class=MsoNoSpacing style='margin-left:2.0in'><span style='font-family:"Courier New"'>0,0</span></p>

<p class=MsoNoSpacing style='margin-left:2.0in'><span style='font-family:"Courier New"'>0,1</span></p>

<p class=MsoNoSpacing style='margin-left:2.0in'><span style='font-family:"Courier New"'>1,0</span></p>

<p class=MsoNoSpacing style='margin-left:2.0in'><span style='font-family:"Courier New"'>1,1</span></p>

<p class=MsoNoSpacing style='margin-left:2.0in'><span style='font-family:"Courier New"'>2,0</span></p>

<p class=MsoNoSpacing style='margin-left:2.0in'><span style='font-family:"Courier New"'>2,1</span></p>

<p class=MsoNoSpacing>The outer loop iterates over i, and the inner loop
iterates over j.  The inner loop executes 2 iterations every time the outer
loop body is executed, and the outer loop executes 3 iterations, so the <span
style='font-family:"Courier New"'>System.out.println </span>statement is
executed 2x3=6 times in total.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 31: More Array Processing</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>For more complex array processing problems, it is
important to take a systematic approach:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
dir=LTR></span>Using English or pseudo-code, develop a sequence of steps that
solve the problem.</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
dir=LTR></span>Try the steps by hand on a simple set of data.</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'>3.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
dir=LTR></span>Translate those steps into Java.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Try to think of all important special cases and test
those by hand also.  Important special cases can include:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>the array is empty</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>the array contains only one element</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>the first two values are identical</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>the last two values are identical</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 32: Factoring out Repeated Code</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Making small changes to some code in order to improve it
or fix errors is called <b>maintaining</b> the code.</p>

<p class=MsoNoSpacing><b>&nbsp;</b></p>

<p class=MsoNoSpacing><b>Repeated code </b>is two or more sections of code that
do the same thing.  Sections of repeated code are not always identical -- they
merely achieve the same result.  Repeated code is a poor programming practice
because it is difficult to maintain.  Specifically:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>It is a common mistake to change one
instance of a repeated section while forgetting to make the same change in
another repeated section.</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>Even if you remember to make all the
required changes, it requires additional work to do so.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>To eliminate repeated code, you use a technique called <b>factoring
out repeated code</b>.  This consists of the following steps:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
dir=LTR></span>Define a new method that performs the same action as the
repeated code.</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
dir=LTR></span>Copy one instance of the repeated code into the new method, and
make any necessary adjustments.</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'>3.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
dir=LTR></span>Replace every instance of the repeated code with a single line
that calls the new method.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 33: </b><b><span style='font-family:"Courier New"'>public</span>
and </b><b><span style='font-family:"Courier New"'>private</span></b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>A <b><span style='font-family:"Courier New"'>public</span></b>
field or method is visible to code in other classes.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>A <b><span style='font-family:"Courier New"'>private</span></b>
field or method is not visible to code in other classes.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The Java keywords <span style='font-family:"Courier New"'>public</span>
and <span style='font-family:"Courier New"'>private</span> are called <b>access
modifiers</b>, because they modify the type of access that other code has to a
given field or method.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The general rule for the <span style='font-family:"Courier New"'>public</span>
and <span style='font-family:"Courier New"'>private</span> access modifiers is:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>all <i>fields</i> are declared <span
style='font-family:"Courier New"'>private</span></p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>methods for use <i>outside</i> the current
class are declared <span style='font-family:"Courier New"'>public</span></p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>methods for use only <i>inside</i> the
current class are declared <span style='font-family:"Courier New"'>private</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The principle behind this rule is an idea called <b>information
hiding</b>, which states that a class should reveal to other classes only the
information needed by other classes -- all other information should be <i>hidden</i>,
by declaring it <span style='font-family:"Courier New"'>private</span>.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>One advantage of information hiding is that it makes
abstraction work better: if the implementation details of one class are hidden
from another class, the second class can be written without depending on those
implementation details.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The <b>public interface </b>of a class consists of  its
public methods and constructors -- in other words, the things that are
available to other classes.  A public interface includes names, parameter
lists, return types and specified behavior of each method and constructor. 
JavaDoc comments before each method are the conventional way of communicating a
public interface to other programmers.  These JavaDoc comments can be
automatically extracted and formatted to present a coherent, easily-understood
view of the public interface, generally as a web page.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Refactoring</b> a class means improving the
implementation of the class without changing its public interface.  Factoring
out repeated code is one example of refactoring, but there many others,
including adding new fields or changing the data type of fields (e.g. from
array to <span style='font-family:"Courier New"'>ArrayList</span>).</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 34: Class Constants and </b><b><span
style='font-family:"Courier New"'>HashMap</span></b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>It is often useful to attach a name like MAX_TEMPERATURE,
NUM_STUDENTS, or BUILDING_NAME to a particular value such as 71.5, 64454, or
“Tome”.   A named value is called a <b>class constant </b>or just a <b>constant</b>. 
Class constants are declared using the two keywords <b><span style='font-family:
"Courier New"'>static final</span></b>, as follows:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>public
static final DataType NAME = value;</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>For example,</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>public
static final double MAX_TEMPERATURE = 71.5;</span></p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>public
static final String BUILDING_NAME = &quot;Tome&quot;;</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>By convention, every letter of a constant’s name is
capitalized, with underscores separating words.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The <b><span style='font-family:"Courier New"'>static</span></b>
keyword means that all instances of the class share one copy of the field (in
contrast to non-<span style='font-family:"Courier New"'>static </span>fields,
which have a separate copy for every instance of the class).  </p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The <b><span style='font-family:"Courier New"'>final</span></b>
keyword means that the value of the field cannot be changed after it is
initialized.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The combination <span style='font-family:"Courier New"'>static
final</span> therefore means that a single copy of the field is shared between
all instances of the class and its value cannot be changed.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Inside the class where a constant is defined, you refer
to a constant by its name just like any other field.  Outside the class, you
refer to a constant using the syntax ClassName.ConstantName.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The two main reasons for using class constants are:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>the code is more easily understood (e.g. <span
style='font-family:"Courier New"'>MAX_TEMPERATURE </span>is more meaningful to
a human reader than 71.5)</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>it is much easier to change the value of a
constant (which occurs at only one place in the code) than it is to change a
value in every place that it is used in the code</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Therefore, you should avoid using literal values in your
code.  (A <b>literal value</b> is a number or quoted string, like 23, 71.5 or
“Tome”.) Instead, define a class constant that equals the literal value.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Both in computer programs and in real life, you often
need to use one piece of data to find out another piece of data.  For example,
when using a telephone book you start with one piece of data (a person's name,
such as “Smith”) and use it to find out another piece of data (the person's
telephone number, such as “727-3478-2387”).  The piece of data you start with
is called the <b>key</b>, and the piece of data you end up with is called the <b>value</b>. 
Taken together, both pieces of data are called a <b>key-value pair</b>.  </p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>In Java, you can store a collection of key-value pairs
using a <span style='font-family:"Courier New"'>HashMap</span>.   A <span
style='font-family:"Courier New"'>HashMap</span> constructor creates an empty
collection of key-value pairs, and specifies the data types of the keys and the
values using angled brackets, as follows:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>               <span style='font-family:"Courier New"'>HashMap
&lt; keyType, valueType &gt; ()</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>For example,</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>HashMap &lt;String,
Account&gt; accountMap = new HashMap &lt; String, Account&gt; ();</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>declares and initializes a reference <span
style='font-family:"Courier New"'>accountMap</span>, which is a <span
style='font-family:"Courier New"'>HashMap</span> with keys of type <span
style='font-family:"Courier New"'>String</span> and values of type <span
style='font-family:"Courier New"'>Account</span>.   The intention of this
HashMap is that each key is the name of a person (e.g. “Smith”), and the corresponding
value is a reference to that person's bank account.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>Two important methods of the <span style='font-family:
"Courier New"'>HashMap</span> class are</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><span style='font-family:"Courier New"'>put
( <i>key</i>, <i>value</i> )</span></p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span>inserts a new key-value pair into the
collection, with the given key and value</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><span style='font-family:"Courier New"'>get
( <i>key</i> )</span></p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span>returns a reference to the value associated
with the given key</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>For example, the code</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     Account
account1 = new Account();</span></p>

<p class=MsoNoSpacing>               <span style='font-family:"Courier New"'>accountMap.put(&quot;Smith&quot;,
account1);</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>inserts a key-value pair into the <span style='font-family:
"Courier New"'>HashMap</span>, indicating that Smith’s bank account is <span
style='font-family:"Courier New"'>account1</span>.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The code</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>String name = &quot;Smith&quot;;</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>Account
theAccount = accountMap.get(name);</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>System.out.println(&quot;Balance
for &quot; + name + &quot; is &quot; + theAccount. getBalance() );</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>first retrieves the account corresponding to “Smith” from
the HashMap, and then prints the balance of this account.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The keys and values of a HashMap must have object data
types -- in other words, the keys and values may not have primitive data types
such as <span style='font-family:"Courier New"'>int</span>.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The HashMap class is not automatically available and must
be imported using the statement</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>import
java.util.HashMap;</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 35: </b><b><span style='font-family:"Courier New"'>Set</span>s
and for-each loops</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The most basic kind of collection in the Java is a <b><span
style='font-family:"Courier New"'>Set</span></b>.  When declaring a <span
style='font-family:"Courier New"'>Set</span>, use angled brackets to specify
what type of objects the <span style='font-family:"Courier New"'>Set</span>
collection will contain.  For example,</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     Set&lt;Account&gt;
accountSet;</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>declares a reference <span style='font-family:"Courier New"'>accountSet</span>
that will point to a set of <span style='font-family:"Courier New"'>Account</span>
objects.  </p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The <span style='font-family:"Courier New"'>HashMap</span>
class has a method called <span style='font-family:"Courier New"'>keySet()</span>
that returns the set of all keys in the <span style='font-family:"Courier New"'>HashMap</span>
as a <span style='font-family:"Courier New"'>Set</span>.  For example, if a
HashMap has been declared using the statement</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>HashMap &lt;String,
Account&gt; accountMap = new HashMap &lt; String, Account&gt; ();</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>then the statement</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNoSpacing style='text-indent:.5in'><span style='font-family:"Courier New"'>Set&lt;String&gt;
nameSet = accountMap.keySet();</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>creates a <span style='font-family:"Courier New"'>Set</span>
storing all of the keys in <span style='font-family:"Courier New"'>accountMap</span>
-- in this case, the set of all names of people who have bank accounts in the <span
style='font-family:"Courier New"'>HashMap</span>.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>A <b>for-each loop</b> can be used in Java to iterate
over each element in any collection, using the following syntax:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>for
( <i>ElementType variableName</i> : <i>collectionName</i> ) {</span></p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>     <i>loopBody</i></span></p>

<p class=MsoNoSpacing style='margin-left:.5in'><span style='font-family:"Courier New"'>}</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>where</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><i><span style='font-family:"Courier New"'>ElementType</span></i>
is the data type of elements in the collection.</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><i><span style='font-family:"Courier New"'>variableName</span></i>
is any local variable name.</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><i><span style='font-family:"Courier New"'>collectionName</span></i>
is the name of the collection to be iterated over.</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><i><span style='font-family:"Courier New"'>loopBody</span></i>
is a sequence of statements that are executed once for every element in the
collection.  At each iteration, <i><span style='font-family:"Courier New"'>variableName</span></i> 
is assigned to a different element of the collection automatically.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>For example,  assuming that <span style='font-family:
"Courier New"'>Set&lt;String&gt; nameSet </span>has been declared as above, the
following code iterates over the names in the set, printing out each name on a
separate line:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     for (String
name : nameSet) {</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>           System.out.println(name);</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     }</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 36: Introduction to Zuul</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>This class gives essential background on the final lab
and homework project but introduces no new concepts.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 37: The </b><b><span style='font-family:"Courier New"'>main</span>
Method</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>In order to run a Java program without using BlueJ, one
of your classes must have a <b><span style='font-family:"Courier New"'>main</span>
method</b>, which is a special method that is automatically invoked when a Java
program is run.  The <span style='font-family:"Courier New"'>main</span> method
always has the following signature:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     public static
void main(String[] args)</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>where</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><span style='font-family:"Courier New"'>public</span>
means that the method can be used outside the class.</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><span style='font-family:"Courier New"'>static</span>
means that the method is associated with the class and not a specific object.</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><span style='font-family:"Courier New"'>String[]
args </span>is an array of strings, called the program's <b>command line arguments</b>,
or just<b> arguments </b>.   The command line arguments give specific
information on how the program should be run, and are described in more detail
below.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The code in the body of the <span style='font-family:
"Courier New"'>main</span> method is executed when the program starts. 
Typically, the body of the <span style='font-family:"Courier New"'>main</span>
method creates a new object, and executes one or more of that object's
methods.  For example, the <span style='font-family:"Courier New"'>main</span> method
of an <span style='font-family:"Courier New"'>Account</span> class might
consist of:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     public
static void main(String[] args) {</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>           Account
account = new Account(5000, 12);</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>           account.withdraw(200);</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>           int
newBalance = account.getBalance();</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>           System.out.println(&quot;New
balance is &quot; + newBalance);</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     }</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>To <b>run a program</b> with a <span style='font-family:
"Courier New"'>main</span> method, the following steps are required:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>open a <b>terminal window</b> (also called a
<b>command prompt window</b>, on machines running Windows)</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>change into the folder containing the Java
program.  Useful commands for doing this include:</p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span><b><span style='font-family:"Courier New"'>pwd</span></b>
-- print <b>current directory</b>, also called the <b>working directory</b></p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span><b><span style='font-family:"Courier New"'>ls</span></b>
-- list current directory (or <b><span style='font-family:"Courier New"'>dir</span></b>,
on machines running Windows)</p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span><b><span style='font-family:"Courier New"'>cd</span></b><span
style='font-family:"Courier New"'> newDir </span>-- change directory into the <span
style='font-family:"Courier New"'>newDir</span> folder</p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span><b><span style='font-family:"Courier New"'>cd
</span></b><span style='font-family:"Courier New"'>..</span>  -- change
directory into parent folder</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span>enter the command <span style='font-family:
"Courier New"'>java ClassName</span>, where <span style='font-family:"Courier New"'>ClassName</span>
is the name of the class whose <span style='font-family:"Courier New"'>main</span>
method you want to run.  For example, the command <span style='font-family:
"Courier New"'>java Account</span> would execute the above <span
style='font-family:"Courier New"'>main</span> method.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>The interface provided by a terminal window, where you
type a single line of commands at a time, is often called a <b>command line</b>.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>To <b>compile a class</b> from the command line, open a
terminal window and change into the program's folder as above, then enter the
command <span style='font-family:"Courier New"'>javac ClassName.java</span>,
where <span style='font-family:"Courier New"'>ClassName</span> is the name of
the class you want to compile.  For example, the command <span
style='font-family:"Courier New"'>javac Account.java</span> would compile the <span
style='font-family:"Courier New"'>Account</span> class.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>When you run a program from the command line, you can
specify command line arguments after the name of the class.  Each argument is
separated from the previous argument by one or more spaces.  The arguments are
passed to the <span style='font-family:"Courier New"'>main</span> method as <span
style='font-family:"Courier New"'>String</span>s in the array <span
style='font-family:"Courier New"'>args</span>, with <span style='font-family:
"Courier New"'>args[0]</span> being the first command line argument, <span
style='font-family:"Courier New"'>args[1]</span> being the second command line
argument, and so on.    A useful method when processing command line arguments
is  <b><span style='font-family:"Courier New"'>Integer.parseInt()</span></b><span
style='font-family:"Courier New"'> </span>which converts a<span
style='font-family:"Courier New"'> String </span>into an<span style='font-family:
"Courier New"'> int</span>.<span style='font-family:"Courier New"'>  </span>For
example, the following <span style='font-family:"Courier New"'>main</span>
method for <span style='font-family:"Courier New"'>Account</span> uses the
first 3 command line arguments as the initial balance of a bank account, the
initial interest rate, and the amount to withdraw from the bank account:</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     public
static void main(String[] args) {</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>           int
initBalance = Integer.parseInt(args[0]);</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>           int
initInterest = Integer.parseInt(args[1]);</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>           int
withdrawAmount = Integer.parseInt(args[2]);</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>           Account
account = new Account(initBalance, initInterest);</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>           account.withdraw(withdrawAmount);</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>           int
newBalance = account.getBalance();</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>           System.out.println(&quot;New
balance is &quot; + newBalance);</span></p>

<p class=MsoNoSpacing><span style='font-family:"Courier New"'>     }</span></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>When given the command line “<span style='font-family:
"Courier New"'>java Account 3000 12 250</span>”, this program creates a new
bank account with balance 3000 and interest rate 12, withdraws 250 from the
bank account then prints the string “<span style='font-family:"Courier New"'>New
balance is 2750</span>”.</p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing><b>Topic 38: Good programming practices</b></p>

<p class=MsoNoSpacing>&nbsp;</p>

<p class=MsoNoSpacing>We have already studied several programming practices
that lead to code that is easy to design, maintain and understand.  The good
programming practices studied so far include: (i) avoiding repeated code, (ii)
use of class constants, (iii) information hiding via public/private. 
Additional good programming practices include:</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><b>Method cohesion</b>: a single method
should perform a single task.  Thus, we prefer methods that are short and
cohesive. (This permits greater reuse of methods.)</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><b>Class cohesion</b>: a single class should
have a single purpose within the application. (This permits greater reuse of
classes.)</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><b>Loose coupling of classes</b>: classes
should be designed so that changes in one class cause few changes in other
classes. (This leads to easier maintenance.)</p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><b>Encapsulation</b>: a class should
encapsulate its data. That is, a class’s public interface should reveal <i>what</i>
it can do, not <i>how</i> it does it. </p>

<p class=MsoNoSpacing style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span dir=LTR></span><b>Responsibility-driven design</b>: this is
a software development approach that incorporates class cohesion, loose
coupling, and encapsulation. These concepts can be reformulated as two further
important principles:</p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span>Each class should be responsible for
performing a single role in the application (similar to class cohesion).</p>

<p class=MsoNoSpacing style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span dir=LTR></span>Each class should be responsible for
handling its own data (combines encapsulation and loose coupling).</p>

</div>

</body>

</html>
